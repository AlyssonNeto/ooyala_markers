<?php
// $Id:$

/**
 * @file
 */

/**
 * Implements hook_theme().
 */
function ooyala_markers_theme() {
  return array(
    'ooyala_marker' => array(
      'arguments' => array('element' => NULL),
    ),
    'ooyala_markers_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Impelements hook_field_info().
 */
function ooyala_markers_field_info() {
  return array(
    'ooyala_marker' => array(
      'label' => t('Ooyala Chapter Marker'),
      'description' => t('Store chapter markers for Ooyala video fields.'),
    ),
  );
}

/**
 * Implements hook_field_settings().
 */
function ooyala_markers_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      $columns = array(
        'title' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
          'sortable' => TRUE,
        ),
        'time' => array(
          'type' => 'varchar',
          'length' => 8,
          'not null' => FALSE,
          'sortable' => TRUE,
        ),
      );
      return $columns;
  }
}

/**
 * Implements hook_elements().
 */
function ooyala_markers_elements() {
  $elements = array();
  $elements['ooyala_marker'] = array(
    '#input' => TRUE,
    '#columns' => array('title', 'time'),
    '#process' => array('ooyala_markers_process'),
  );
  return $elements;
}

/**
 * Implements hook_widget_info().
 */
function ooyala_markers_widget_info() {
  return array(
    'ooyala_marker' => array(
      'label' => t('Chapter Marker'),
      'field types' => array('ooyala_marker'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Implements hook_widget_settings().
 */
function ooyala_markers_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      $form = array();
      $form['ooyala_video_field'] = array(
        '#type' => 'select',
        '#title' => t('Ooyala video field'),
        '#multiple' => TRUE,
        '#description' => t('The Ooyala video field the chapter markers should apply to.'),
        '#options' => array('one', 'two'),
        '#default_value' => -1,
      );
      return $form;
    case 'save':
      return array('ooyala_video_field');
  }
}

/**
 * Implements hook_widget().
 */
function ooyala_markers_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Impelemnt hook_content_is_empty().
 */
function ooyala_markers_content_is_empty($item, $field) {
  if (empty($item['title']) && empty($item['time'])) {
    return TRUE;
  }
  return FALSE;
}

function ooyala_markers_process($element, $edit, &$form_state, $form) {
  $field_name = $element['#field_name'];
  $field = $form['#field_info'][$field_name];
  $element['#field'] = $field;
  $element['#theme'] = 'ooyala_marker';
  $element['#element_validate'] = array('ooyala_markers_validate');

  $element['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => isset($element['#value']['title']) ? $element['#value']['title'] : '',
  );
  $element['time'] = array(
    '#type' => 'textfield',
    '#title' => t('Time'),
    '#size' => 8,
    '#maxlength' => 8,
    '#description' => t('Time should be entered in the format hh:mm:ss'),
    '#default_value' => isset($element['#value']['time']) ? $element['#value']['time'] : '',
    '#element_validate' => array('ooyala_markers_validate_time'),
  );

  // Set #element_validate in a way that it will not wipe out other
  // validation functions already set by other modules.
  if (empty($element['#element_validate'])) {
    $element['#element_validate'] = array();
  }

  return $element;
}

function ooyala_markers_validate($element) {
  // If the user enetered a title or a time make sure they entered both.
  if (!empty($element['title']['#value']) || !empty($element['time']['#value'])) {
    if (empty($element['title']['#value'])) {
      form_error($element['title'], t('Both title and time fields must be filled out.'));
    }
    if (empty($element['time']['#value'])) {
      form_error($element['time'], t('Both title and time fields must be filled out.'));
    }
  }
}

function ooyala_markers_validate_time($element) {
  // Verify that input is the format hh:mm:ss.
  $pattern = '/^(\d{1,2}):(\d{2}):(\d{2})?$/';
  if (!empty($element['#value']) && !preg_match($pattern, $element['#value'])) {
    form_error($element, t('Must be in the format hh:mm:ss'));
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function ooyala_markers_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Title/Time as link'),
      'field types' => array('ooyala_marker'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * FAPI theme for an individual text elements.
 */
function theme_ooyala_marker($element) {
  drupal_add_css(drupal_get_path('module', 'ooyala_markers') .'/ooyala_markers.css');

  $output = '<div class="ooyala-markers-field clear-block">';
  $output .= check_plain($element['#title']);
  $output .= '<div class="ooyala-markers-field-title ooyala-markers-field-column">' . drupal_render($element['title']) . '</div>';
  $output .= '<div class="ooyala-markers-field-time ooyala-markers-field-column">' . drupal_render($element['time']) . '</div>';
  $output .= '</div>';
  return $output;
}

function theme_ooyala_markers_formatter_default($element) {
  static $ooyala_markers_js_added;

  if (!isset($ooyala_markers_js_added)) {
    drupal_add_js(drupal_get_path('module', 'ooyala_markers') . '/ooyala_markers.js');
    $ooyala_markers_js_added = TRUE;
  }

  //dsm($element);
  $time = explode(':', $element['#item']['time']);
  $time_in_milliseconds = ($time[0] * 3600000) + ($time[1] * 60000) + ($time[2] * 1000);
  return l($element['#item']['title'], 'node/' . $element['#node']->nid, array('absolute' => TRUE, 'fragment' => $time_in_milliseconds, 'attributes' => array('class' => 'ooyala-markers-marker')));
}
